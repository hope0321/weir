TrajectoryPlannerROS:
  #Set the acceleration limits of the robot
  # acc_lim_x: 2.5
  acc_lim_x: 2.0
  acc_lim_y: 0.0
  acc_lim_th: 1.57

  #Set the velocity limits of the robot
  # max_vel_x: 1.2
  max_vel_x: 0.6
  min_vel_x: 0.1 # 0.1->0.01 4/28
  #max_vel_x: 1.0
  #min_vel_x: 0.1

  ###### 04.28s
  # max_vel_th: 1.57
  # # 0.00 by hst
  # # min_vel_th: 0.0
  # min_vel_th: -0.01
  ######

  max_rotational_vel: 1.0
  min_in_place_vel_theta: 0.4

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.3 # -0.1 -> -0.3

  #For this example, we'll use a holonomic robot
  holonomic_robot: false

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.1
  yaw_goal_tolerance: 0.025
  # yaw_goal_tolerance: 0.05

  #We'll configure how long and with what granularity we'll forward simulate trajectories
  sim_time: 1.7
  sim_granularity: 0.025
  vx_samples: 10 # 3 -> 10
  vtheta_samples: 20

  #Parameters for scoring trajectories
  goal_distance_bias: 0.8
  path_distance_bias: 0.6
  occdist_scale: 0.01
  #0429
  # heading_lookahead: 0.325
  meter_scoring: true


  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: true

  #How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.05

  #Eat up the plan as the robot moves along it
  prune_plan: true


# TrajectoryPlannerROS:
#   max_vel_x: 0.45
#   min_vel_x: 0.1
#   max_rotational_vel: 1.0
#   min_in_place_vel_theta: 0.4

#   acc_lim_theta: 3.2
#   acc_lim_x: 2.5
#   acc_lim_y: 2.5

#   holonomic_robot: true

# TrajectoryPlannerROS:
#   #Set the acceleration limits of the robot
#   acc_lim_th: 3.2

#   #acc_lim_x: 0.5
#   acc_lim_x: 2.5
#   acc_lim_y: 2.5

#   #Set the velocity limits of the robot
#   max_vel_x: 0.8
#   min_vel_x: 0.1
#   max_rotational_vel: 1.0
#   min_in_place_vel_theta: 0.4

#   #The velocity the robot will command when trying to escape from a stuck situation
#   escape_vel: -0.1 # -0.1 -> -0.05

#   #For this example, we'll use a holonomic robot
#   holonomic_robot: false

#   #Set the tolerance on achieving a goal
#   xy_goal_tolerance: 0.1
#   yaw_goal_tolerance: 0.05

#   #We'll configure how long and with what granularity we'll forward simulate trajectories
#   sim_time: 1.7
#   sim_granularity: 0.025
#   vx_samples: 10 # 3 -> 10
#   vtheta_samples: 20

#   #Parameters for scoring trajectories
#   goal_distance_bias: 0.8
#   path_distance_bias: 0.6
#   occdist_scale: 0.01
#   heading_lookahead: 0.325

#   #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
#   dwa: true

#   #How far the robot must travel before oscillation flags are reset
#   oscillation_reset_dist: 0.05

#   #Eat up the plan as the robot moves along it
#   prune_plan: true


### 04.20 version #####
