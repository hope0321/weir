# TrajectoryPlannerROS:

#   # Robot Configuration Parameters
#   acc_lim_x: 3.0
#   acc_lim_theta:  10.0

#   max_vel_x: 0.6
#   min_vel_x: -0.2

#   max_vel_theta: 0.50
#   min_vel_theta: -0.50
#   min_in_place_vel_theta: 0.314

#   holonomic_robot: false
#   escape_vel: -0.5

#   # Goal Tolerance Parameters
#   yaw_goal_tolerance: 0.5
#   xy_goal_tolerance: 0.25
#   latch_xy_goal_tolerance: false

#   # Forward Simulation Parameters
#   sim_time: 2.0
#   sim_granularity: 0.02
#   angular_sim_granularity: 0.02
#   vx_samples: 6
#   vtheta_samples: 20
#   controller_frequency: 20.0

#   # Trajectory scoring parameters
#   meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default (false).
#   occdist_scale:  0.2 #The weighting for how much the controller should attempt to avoid obstacles. default 0.01
#   pdist_scale: 0.75  #     The weighting for how much the controller should stay close to the path it was given . default 0.6
#   gdist_scale: 1.0 #     The weighting for how much the controller should attempt to reach its local goal, also controls speed  default 0.8

#   heading_lookahead: 0.325  #How far to look ahead in meters when scoring different in-place-rotation trajectories
#   heading_scoring: true  #Whether to score based on the robot's heading to the path or its distance from the path. default false
#   heading_scoring_timestep: 0.8   #How far to look ahead in time in seconds along the simulated trajectory when using heading scoring (double, default: 0.8)
#   dwa: true #Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
#   simple_attractor: false
#   publish_cost_grid_pc: true

#   #Oscillation Prevention Parameters
#   oscillation_reset_dist: 0.05 #How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
#   escape_reset_dist: 0.1
#   escape_reset_theta: 0.1


TrajectoryPlannerROS:
  #Set the acceleration limits of the robot
  # acc_lim_x: 2.5
  acc_lim_x: 2.0
  acc_lim_y: 0.0
  acc_lim_th: 1.57

  #Set the velocity limits of the robot
  max_vel_x: 1.0
  min_vel_x: 0.1 # 0.1->0.01 4/28


  max_rotational_vel: 1.0
  min_in_place_vel_theta: 0.4

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.3 # -0.1 -> -0.3

  #For this example, we'll use a holonomic robot
  holonomic_robot: false

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.1
  yaw_goal_tolerance: 0.025
  # yaw_goal_tolerance: 0.05

  #We'll configure how long and with what granularity we'll forward simulate trajectories
  sim_time: 1.7
  sim_granularity: 0.025
  vx_samples: 10 # 3 -> 10
  vtheta_samples: 20

  #Parameters for scoring trajectories
  goal_distance_bias: 0.8
  path_distance_bias: 0.6
  occdist_scale: 0.01
  #0429
  # heading_lookahead: 0.325
  meter_scoring: true


  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: true

  #How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.05

  #Eat up the plan as the robot moves along it
  prune_plan: true
